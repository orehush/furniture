{"version":3,"sources":["utils/backend.js","components/ModalWrapper/index.js","pages/ProjectsList/components/ProjectForm/index.js","pages/ProjectsList/index.js","pages/ProjectDetails/utils.js","pages/ProjectDetails/components/ExportCSV.js","pages/ProjectDetails/components/NewBoxForm/index.js","pages/ProjectDetails/index.js","App.js","reportWebVitals.js","index.js"],"names":["notEmpty","value","defaultValue","isEmpty","request","method","path","queryParams","data","headers","a","queryString","Object","entries","map","key","join","fetch","toUpperCase","mode","cache","body","JSON","stringify","response","json","getProject","id","createProject","city","street","name","createBox","template","project","inputs","ModalWrapper","show","onClose","children","useState","isOpen","setIsOpen","useEffect","toggle","onClosed","ProjectForm","onFinish","setName","setCity","setStreet","Form","className","FormGroup","Label","for","Input","type","placeholder","onChange","e","target","Button","onClick","disabled","ProjectsList","useQuery","page","getProjects","isLoading","queryClient","useQueryClient","showForm","setShowForm","results","to","invalidateQueries","getProjectDetails","boxes","getBoxesCSVData","forEach","box","outputs","output","push","base","width","length","amount","square","square_extra","edge","edge_extra","drilling_count","ExportCSV","csvData","fileName","color","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","Field","default_value","setValue","tag","check","NewBoxForm","setInputs","setTemplate","templates","filter","i","t","style","height","border","cursor","input","ProjectDetails","useParams","history","useHistory","initialData","address","QueryClient","defaultOptions","queries","refetchOnMount","refetchOnWindowFocus","App","QueryClientProvider","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.476d95ff.chunk.js","sourcesContent":["import { isEmpty } from 'lodash';\n\nconst notEmpty = (value, defaultValue) => {\n    return isEmpty(value) ? defaultValue : value;\n}\n\nconst request = async (method, path, queryParams, data, headers) => {\n    const queryString = Object.entries(notEmpty(queryParams, {})).map(([key, value]) => `${key}=${value}`).join('&')\n    const response = await fetch(`/api/${path}?${queryString}`, {\n        method: method.toUpperCase(),\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n            'Content-Type': 'application/json',\n            ...(notEmpty(headers, {}))\n        },\n        body: isEmpty(data) ? null : JSON.stringify(data)\n    });\n    return await response.json();\n}\n\nexport const getProjects = (page = 1) => {\n    return request('GET', '/projects', { page });\n}\n\nexport const getProject = (id) => {\n    return request('GET', `/projects/${id}`);\n}\n\nexport const createProject = ({ city, street, name }) => {\n    return request('POST', `/projects`, null, { city, street, name });\n}\n\nexport const getProjectBoxes = (pk) => {\n    return request('GET', `/projects/${pk}/nightstands`);\n}\n\nexport const getBoxTemplates = () => {\n    return request('GET', `/nightstand_templates`);\n}\n\nexport const createBox = (template, project, inputs) => {\n    return request('POST', '/nightstands', null, { template, project, inputs })\n}\n\nexport const deleteBox = (pk) => {\n    return request('DELETE', '/nightstands')\n}\n","import Modal from 'reactstrap/lib/Modal';\nimport {useState, useEffect} from \"react\";\n\nexport default function ModalWrapper({ show, onClose, children }) {\n    const [isOpen, setIsOpen] = useState(show);\n    const toggle = () => setIsOpen(!isOpen);\n\n    useEffect(() => {\n        setIsOpen(show);\n    }, [show])\n\n    return <Modal isOpen={isOpen} toggle={toggle} onClosed={onClose}>\n        {children}\n    </Modal>\n}\n","import {Button, Form, FormGroup, Input, Label} from \"reactstrap\";\nimport {useState} from \"react\";\nimport {createProject} from \"../../../../utils/backend\";\n\nexport default function ProjectForm({ onFinish }) {\n    const [name, setName] = useState('');\n    const [city, setCity] = useState('');\n    const [street, setStreet] = useState('');\n\n    return (\n        <Form className=\"m-5\">\n            <h3>Create New Project</h3>\n            <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"project name\" value={name} onChange={(e) => setName(e.target.value)} />\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"city\">City</Label>\n                <Input type=\"text\" name=\"city\" id=\"city\" placeholder=\"city\" value={city} onChange={(e) => setCity(e.target.value)} />\n            </FormGroup>\n            <FormGroup>\n                <Label for=\"street\">Street</Label>\n                <Input type=\"text\" name=\"street\" id=\"street\" placeholder=\"street\" value={street} onChange={(e) => setStreet(e.target.value)} />\n            </FormGroup>\n            <Button\n                onClick={async () => {\n                    await createProject({ name, city, street });\n                    onFinish && onFinish();\n                }}\n                disabled={!name || !city}\n            >\n                Submit\n            </Button>\n        </Form>\n    );\n}\n","import './styles.css';\nimport {useQuery, useQueryClient} from \"react-query\";\nimport {getProjects} from \"../../utils/backend\";\nimport {Link} from \"react-router-dom\";\nimport ModalWrapper from \"../../components/ModalWrapper\";\nimport ProjectForm from \"./components/ProjectForm\";\nimport {useState} from \"react\";\nimport {Button} from \"reactstrap\";\n\nexport default function ProjectsList() {\n    const { data, isLoading } = useQuery('project-list', () => getProjects());\n    const queryClient = useQueryClient();\n    const [showForm, setShowForm] = useState(false);\n\n    return <div className=\"m-5\">\n        <h1>Projects list</h1>\n        {isLoading && <div>Loading...</div>}\n        <ul>\n            {data && data.results.map(project => (<li key={project.id}>\n                <Link to={`/project/${project.id}`}>{project.name}</Link>\n            </li>))}\n        </ul>\n        <Button onClick={() => {setShowForm(true)}}>Add new project</Button>\n        <ModalWrapper show={showForm} onClose={() => setShowForm(false)}>\n            <ProjectForm onFinish={() => {\n                queryClient.invalidateQueries('project-list');\n                setShowForm(false);\n            }}/>\n        </ModalWrapper>\n    </div>\n}\n","import {getProject, getProjectBoxes} from \"../../utils/backend\";\n\nexport const getProjectDetails = async (id) => {\n    const project = await getProject(id);\n    const boxes = await getProjectBoxes(id);\n    return { project, boxes }\n}\n\nexport const getBoxesCSVData = (boxes) => {\n    if (!boxes) {\n        return [];\n    }\n    const data = [\n        [\n            'Тип матеріалу',\n            'Ширина',\n            'Довжина',\n            'Кількість',\n            'Площа',\n            'Площа з запасом',\n            'Кромка',\n            'Кромка з запасом',\n            'Кількість сверлінь',\n        ]\n    ]\n    boxes.forEach(box => {\n        box.outputs.forEach(output => {\n            data.push([\n                output.base,\n                output.width || 0,\n                output.length || 0,\n                output.amount || 0,\n                output.square || 0,\n                output.square_extra || 0,\n                output.edge || 0,\n                output.edge_extra || 0,\n                output.drilling_count || 0,\n            ])\n        })\n    })\n\n    return data;\n}","import Button from 'reactstrap/lib/Button';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nexport const ExportCSV = ({csvData, fileName}) => {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n    const exportToCSV = (csvData, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(csvData);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(data, fileName + fileExtension);\n    }\n\n    return (\n        <Button color='info' onClick={(e) => exportToCSV(csvData,fileName)}>Export to excel</Button>\n    )\n}\n","import {Button, Form, FormGroup, Input, Label} from \"reactstrap\";\nimport {useState, useEffect} from \"react\";\nimport {createBox, getBoxTemplates} from \"../../../../utils/backend\";\nimport {useQuery} from \"react-query\";\n\nconst Field = ({ template, onChange }) => {\n    const [value, setValue] = useState(template?.default_value);\n    useEffect(() => {\n        if (template.default_value) {\n            setValue(template.default_value);\n        }\n    }, [template]);\n    useEffect(() => {\n        onChange(+value);\n    }, [value]);\n\n    if (template.type === 4) {\n        return (\n            <FormGroup tag=\"fieldset\">\n                <legend>{template.name}</legend>\n                <FormGroup check>\n                    <Label check>\n                        <Input type=\"radio\" name=\"radio1\" value={1} onChange={e => setValue(e.target.value)}/>{' '}\n                        Yes\n                    </Label>\n                </FormGroup>\n                <FormGroup check>\n                    <Label check>\n                        <Input type=\"radio\" name=\"radio1\" value={0} onChange={e => setValue(e.target.value)}/>{' '}\n                        No\n                    </Label>\n                </FormGroup>\n            </FormGroup>\n        )\n    }\n\n    return (\n        <FormGroup>\n            <Label for=\"name\">{template.name}</Label>\n            <Input type=\"number\" name=\"name\" placeholder={template.name} value={value} onChange={(e) => setValue(e.target.value)} />\n        </FormGroup>\n    )\n}\n\nexport default function NewBoxForm({ onFinish, project }) {\n    const [inputs, setInputs] = useState([]);\n    const [template, setTemplate] = useState(null);\n    const { data: templates } = useQuery('templates', () => getBoxTemplates())\n    useEffect(() => {\n        if (template && template.inputs) {\n            setInputs(\n                template.inputs.filter(i => i.default_value).map(i => ({ template: i.id, value: i.default_value }))\n            )\n        }\n    }, [template]);\n\n    return (\n        <Form className=\"m-5\">\n            <h3>Create New Box</h3>\n            {templates && templates.map(t => {\n                return (\n                    <div\n                        key={t.id}\n                        style={{ width: '150px', height: '150px', border: '1px solid #000', cursor: 'pointer' }}\n                        className={`p-2 d-flex justify-content-center align-items-center ${t.id === template?.id && 'border-info border-2'}`}\n                        onClick={() => setTemplate(t)}\n                    >\n                        <h4>{t.name}</h4>\n                    </div>\n                )\n            })}\n            {template && template.inputs && template.inputs.map(input => {\n                return (\n                    <Field template={input} onChange={(value) => {\n                        setInputs(\n                            [\n                                ...inputs.filter(i => i.template !== input.id),\n                                { template: input.id, value: value }\n                            ]\n                        )\n                    }}/>\n                )\n            })}\n            <Button\n                onClick={async () => {\n                    await createBox(template.id, project.id, inputs);\n                    onFinish && onFinish();\n                }}\n                disabled={!template}\n            >\n                Submit\n            </Button>\n        </Form>\n    );\n}\n","import './styles.css';\nimport { useParams } from \"react-router-dom\";\nimport {useQuery, useQueryClient} from \"react-query\";\nimport {getBoxesCSVData, getProjectDetails} from \"./utils\";\nimport {ExportCSV} from \"./components/ExportCSV\";\nimport Button from \"reactstrap/lib/Button\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from 'react';\nimport ModalWrapper from \"../../components/ModalWrapper\";\nimport NewBoxForm from \"./components/NewBoxForm\";\n\n\nexport default function ProjectDetails() {\n    const { id } = useParams();\n    const history = useHistory();\n    const queryClient = useQueryClient();\n    const [showForm, setShowForm] = useState(false);\n\n    const { data: { project, boxes }, isLoading } = useQuery(\n        `project-detail-${id}`,\n        () => getProjectDetails(id),\n        {\n            initialData: {}\n        }\n    );\n\n    return <div className=\"m-5\">\n        <h1>Project Details</h1>\n        <Button onClick={() => history.push('/')}>Go Back</Button>\n        {isLoading && <div>Loading...</div>}\n        <div>{project?.name}</div>\n        <div>{project?.city}</div>\n        <div>{project?.address}</div>\n        <div className=\"mt-3\">\n            <div className=\"mb-2 w-50 d-flex justify-content-between\">\n                {project && boxes && <ExportCSV csvData={getBoxesCSVData(boxes)} fileName={project.name} />}\n                {project && <Button color='primary' onClick={() => setShowForm(true)}>Add new box</Button>}\n            </div>\n            <table className=\"table table-bordered table-striped w-50\">\n                <thead>\n                    <tr>\n                        <th>Тип матеріалу</th>\n                        <th>Ширина</th>\n                        <th>Довжина</th>\n                        <th>Кількість</th>\n                        <th>Площа</th>\n                        <th>Площа з запасом</th>\n                        <th>Кромка</th>\n                        <th>Кромка з запасом</th>\n                        <th>Кількість сверлінь</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {boxes && boxes.map(box => {\n                        return box.outputs.map(output => {\n                            return <tr>\n                                <td>{output.base}</td>\n                                <td>{output.width || 0}</td>\n                                <td>{output.length || 0}</td>\n                                <td>{output.amount || 0}</td>\n                                <td>{output.square || 0}</td>\n                                <td>{output.square_extra || 0}</td>\n                                <td>{output.edge || 0}</td>\n                                <td>{output.edge_extra || 0}</td>\n                                <td>{output.drilling_count || 0}</td>\n                            </tr>\n                        })\n                    })}\n                </tbody>\n            </table>\n        </div>\n        <ModalWrapper show={showForm} onClose={() => setShowForm(false)}>\n            <NewBoxForm\n                onFinish={() => {\n                    queryClient.invalidateQueries(`project-detail-${id}`);\n                    setShowForm(false);\n                }}\n                project={project}\n            />\n        </ModalWrapper>\n    </div>\n}\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport ProjectsList from \"./pages/ProjectsList\";\nimport ProjectDetails from \"./pages/ProjectDetails\";\nimport {QueryClient, QueryClientProvider} from \"react-query\";\n\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnMount: true,\n      refetchOnWindowFocus: true\n    }\n  }\n});\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router>\n        <Switch>\n          <Route path=\"/project/:id\">\n            <ProjectDetails />\n          </Route>\n          <Route path=\"/\">\n            <ProjectsList />\n          </Route>\n        </Switch>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}